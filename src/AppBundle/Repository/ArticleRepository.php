<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Article;
use Doctrine\Bundle\DoctrineBundle\DoctrineBundle;
use Doctrine\ORM\EntityNotFoundException;
use Symfony\Component\HttpFoundation\Request;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{

    public function getQuery()
    {
        $articlesQuery = $this->createQueryBuilder('a');

        return $articlesQuery;
    }

    /**
     * @param $id
     */
    public function getOne($id)
    {
        $recordToShow = $this->find($id);

        return $recordToShow;
    }

    /**
     * @param $id
     */
    public function delete($id = null)
    {
        if ($id == null) {
            $sql = 'DELETE FROM AppBundle\Entity\Article';
            $this->createNamedQuery($sql);
        } else {
            $deletingRecord = $this->find($id);
            $em = $this->getEntityManager();
            $em->remove($deletingRecord);
            $em->flush();
        }

    }

    /**
     * @param Request $request
     */
    public function createNew(Request $request)
    {
//        $requestAssocArray = json_decode($request->getContent(), true);
//
//        $newArticle = new Article();
//        $newArticle->setTitle($requestAssocArray['title']);
//        $newArticle->setContent($requestAssocArray['content']);

//        $em = $this->getEntityManager();
//        $em->persist($newArticle);
//        $em->flush();










    }

    /**
     * TODO użyc także form.
     */
    public function update($id, Request $request)
    {
        $updatingArticle = $this->find($id);

        $dataToUpdate = json_decode($request->getContent(), true);

        if (!$updatingArticle) {
            /**
             * TODO Stworzyć odpowiedni wyjątek. Nie mylić wyjątków w kodzie se statusoami kodów HTTP!!!
             */
        }
        $updatingArticle->setTitle($dataToUpdate['title']);
        $updatingArticle->setContent($dataToUpdate['content']);

        $em = $this->getEntityManager();
        $em->flush();
    }

}
